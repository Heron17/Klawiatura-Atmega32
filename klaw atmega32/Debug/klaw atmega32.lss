
klaw atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  0000034e  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000270  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b75  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039f  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000054c  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001dc  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000287  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000074d  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  8a:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_lcd_read_byte>:
//		 Ustawienie wszystkich 4 linii danych jako WEjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_in(void)
{
	DDR(LCD_D7PORT)	&= ~(1<<LCD_D7);
  92:	8f 98       	cbi	0x11, 7	; 17
	DDR(LCD_D6PORT)	&= ~(1<<LCD_D6);
  94:	8e 98       	cbi	0x11, 6	; 17
	DDR(LCD_D5PORT)	&= ~(1<<LCD_D5);
  96:	8d 98       	cbi	0x11, 5	; 17
	DDR(LCD_D4PORT)	&= ~(1<<LCD_D4);
  98:	8c 98       	cbi	0x11, 4	; 17
uint8_t _lcd_read_byte(void)
{
	uint8_t result=0;
	data_dir_in();

	SET_RW;
  9a:	c3 9a       	sbi	0x18, 3	; 24

	SET_E;
  9c:	c4 9a       	sbi	0x18, 4	; 24
//----------------------------------------------------------------------------------------
static inline uint8_t lcd_readHalf(void)
{
	uint8_t result=0;

	if(PIN(LCD_D4PORT)&(1<<LCD_D4)) result |= (1<<0);
  9e:	80 b3       	in	r24, 0x10	; 16
  a0:	82 95       	swap	r24
  a2:	81 70       	andi	r24, 0x01	; 1
	if(PIN(LCD_D5PORT)&(1<<LCD_D5)) result |= (1<<1);
  a4:	85 99       	sbic	0x10, 5	; 16
  a6:	82 60       	ori	r24, 0x02	; 2
	if(PIN(LCD_D6PORT)&(1<<LCD_D6)) result |= (1<<2);
  a8:	86 99       	sbic	0x10, 6	; 16
  aa:	84 60       	ori	r24, 0x04	; 4
	if(PIN(LCD_D7PORT)&(1<<LCD_D7)) result |= (1<<3);
  ac:	87 99       	sbic	0x10, 7	; 16
  ae:	88 60       	ori	r24, 0x08	; 8
	data_dir_in();

	SET_RW;

	SET_E;
	result = (lcd_readHalf() << 4);	// odczyt starszej czêœci bajtu z LCD D7..D4
  b0:	82 95       	swap	r24
  b2:	80 7f       	andi	r24, 0xF0	; 240
	CLR_E;
  b4:	c4 98       	cbi	0x18, 4	; 24

	SET_E;
  b6:	c4 9a       	sbi	0x18, 4	; 24
//----------------------------------------------------------------------------------------
static inline uint8_t lcd_readHalf(void)
{
	uint8_t result=0;

	if(PIN(LCD_D4PORT)&(1<<LCD_D4)) result |= (1<<0);
  b8:	90 b3       	in	r25, 0x10	; 16
  ba:	92 95       	swap	r25
  bc:	91 70       	andi	r25, 0x01	; 1
	if(PIN(LCD_D5PORT)&(1<<LCD_D5)) result |= (1<<1);
  be:	85 99       	sbic	0x10, 5	; 16
  c0:	92 60       	ori	r25, 0x02	; 2
	if(PIN(LCD_D6PORT)&(1<<LCD_D6)) result |= (1<<2);
  c2:	86 99       	sbic	0x10, 6	; 16
  c4:	94 60       	ori	r25, 0x04	; 4
	if(PIN(LCD_D7PORT)&(1<<LCD_D7)) result |= (1<<3);
  c6:	87 99       	sbic	0x10, 7	; 16
  c8:	98 60       	ori	r25, 0x08	; 8
	result = (lcd_readHalf() << 4);	// odczyt starszej czêœci bajtu z LCD D7..D4
	CLR_E;

	SET_E;
	result |= lcd_readHalf();			// odczyt m³odszej czêœci bajtu z LCD D3..D0
	CLR_E;
  ca:	c4 98       	cbi	0x18, 4	; 24

	return result;
}
  cc:	89 2b       	or	r24, r25
  ce:	08 95       	ret

000000d0 <check_BF>:
//		 Sprawdzenie stanu Busy Flag (Zajêtoœci wyœwietlacza)
//
//----------------------------------------------------------------------------------------
uint8_t check_BF(void)
{
	CLR_RS;
  d0:	c2 98       	cbi	0x18, 2	; 24
	return _lcd_read_byte();
  d2:	0e 94 49 00 	call	0x92	; 0x92 <_lcd_read_byte>
}
  d6:	08 95       	ret

000000d8 <_lcd_write_byte>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
  d8:	8f 9a       	sbi	0x11, 7	; 17
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
  da:	8e 9a       	sbi	0x11, 6	; 17
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
  dc:	8d 9a       	sbi	0x11, 5	; 17
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
  de:	8c 9a       	sbi	0x11, 4	; 17
{
	// Ustawienie pinów portu LCD D4..D7 jako wyjœcia
	data_dir_out();

#if USE_RW == 1
	CLR_RW;
  e0:	c3 98       	cbi	0x18, 3	; 24
#endif

	SET_E;
  e2:	c4 9a       	sbi	0x18, 4	; 24
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
  e4:	98 2f       	mov	r25, r24
  e6:	92 95       	swap	r25
  e8:	9f 70       	andi	r25, 0x0F	; 15
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
  ea:	90 ff       	sbrs	r25, 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <_lcd_write_byte+0x1a>
  ee:	94 9a       	sbi	0x12, 4	; 18
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <_lcd_write_byte+0x1c>
  f2:	94 98       	cbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
  f4:	91 ff       	sbrs	r25, 1
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_lcd_write_byte+0x24>
  f8:	95 9a       	sbi	0x12, 5	; 18
  fa:	01 c0       	rjmp	.+2      	; 0xfe <_lcd_write_byte+0x26>
  fc:	95 98       	cbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
  fe:	92 ff       	sbrs	r25, 2
 100:	02 c0       	rjmp	.+4      	; 0x106 <_lcd_write_byte+0x2e>
 102:	96 9a       	sbi	0x12, 6	; 18
 104:	01 c0       	rjmp	.+2      	; 0x108 <_lcd_write_byte+0x30>
 106:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 108:	98 70       	andi	r25, 0x08	; 8
 10a:	11 f0       	breq	.+4      	; 0x110 <_lcd_write_byte+0x38>
 10c:	97 9a       	sbi	0x12, 7	; 18
 10e:	01 c0       	rjmp	.+2      	; 0x112 <_lcd_write_byte+0x3a>
 110:	97 98       	cbi	0x12, 7	; 18
	CLR_RW;
#endif

	SET_E;
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
	CLR_E;
 112:	c4 98       	cbi	0x18, 4	; 24

	SET_E;
 114:	c4 9a       	sbi	0x18, 4	; 24
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 116:	80 ff       	sbrs	r24, 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <_lcd_write_byte+0x46>
 11a:	94 9a       	sbi	0x12, 4	; 18
 11c:	01 c0       	rjmp	.+2      	; 0x120 <_lcd_write_byte+0x48>
 11e:	94 98       	cbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 120:	81 ff       	sbrs	r24, 1
 122:	02 c0       	rjmp	.+4      	; 0x128 <_lcd_write_byte+0x50>
 124:	95 9a       	sbi	0x12, 5	; 18
 126:	01 c0       	rjmp	.+2      	; 0x12a <_lcd_write_byte+0x52>
 128:	95 98       	cbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 12a:	82 ff       	sbrs	r24, 2
 12c:	02 c0       	rjmp	.+4      	; 0x132 <_lcd_write_byte+0x5a>
 12e:	96 9a       	sbi	0x12, 6	; 18
 130:	01 c0       	rjmp	.+2      	; 0x134 <_lcd_write_byte+0x5c>
 132:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 134:	83 ff       	sbrs	r24, 3
 136:	02 c0       	rjmp	.+4      	; 0x13c <_lcd_write_byte+0x64>
 138:	97 9a       	sbi	0x12, 7	; 18
 13a:	01 c0       	rjmp	.+2      	; 0x13e <_lcd_write_byte+0x66>
 13c:	97 98       	cbi	0x12, 7	; 18
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêœci bajtu danych D7..D4
	CLR_E;

	SET_E;
	lcd_sendHalf(_data);				// wys³anie m³odszej czêœci bajtu danych D3..D0
	CLR_E;
 13e:	c4 98       	cbi	0x18, 4	; 24

#if USE_RW == 1
	while( (check_BF() & (1<<7)) );
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <check_BF>
 144:	88 23       	and	r24, r24
 146:	e4 f3       	brlt	.-8      	; 0x140 <_lcd_write_byte+0x68>
#else
	_delay_us(120);
#endif

}
 148:	08 95       	ret

0000014a <lcd_write_cmd>:
//		 Zapis komendy do wyœwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_cmd(uint8_t cmd)
{
	CLR_RS;
 14a:	c2 98       	cbi	0x18, 2	; 24
	_lcd_write_byte(cmd);
 14c:	0e 94 6c 00 	call	0xd8	; 0xd8 <_lcd_write_byte>
 150:	08 95       	ret

00000152 <lcd_write_data>:
//		 Zapis danych do wyœwietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_data(uint8_t data)
{
	SET_RS;
 152:	c2 9a       	sbi	0x18, 2	; 24
	_lcd_write_byte(data);
 154:	0e 94 6c 00 	call	0xd8	; 0xd8 <_lcd_write_byte>
 158:	08 95       	ret

0000015a <lcd_locate>:
//		w zale¿noœci od rodzaju wyœwietlacza (ile posiada wierszy)
//
//----------------------------------------------------------------------------------------
void lcd_locate(int8_t y, int8_t x) //zmiana 4 uint
{
	lcd_y = y; lcd_x = x;//zmiana 5
 15a:	80 93 71 00 	sts	0x0071, r24
 15e:	60 93 70 00 	sts	0x0070, r22
	if (lcd_y<0 || lcd_y >LCD_ROWS-1 || lcd_x<0 || lcd_x>LCD_COLS-1) return;
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	98 f4       	brcc	.+38     	; 0x18c <lcd_locate+0x32>
 166:	66 23       	and	r22, r22
 168:	8c f0       	brlt	.+34     	; 0x18c <lcd_locate+0x32>
 16a:	60 31       	cpi	r22, 0x10	; 16
 16c:	7c f4       	brge	.+30     	; 0x18c <lcd_locate+0x32>
	
		
	switch(y)
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	31 f0       	breq	.+12     	; 0x17e <lcd_locate+0x24>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	31 f0       	breq	.+12     	; 0x182 <lcd_locate+0x28>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	29 f4       	brne	.+10     	; 0x184 <lcd_locate+0x2a>
	{
		case 0: y = LCD_LINE1; break;

#if (LCD_ROWS>1)
	    case 1: y = LCD_LINE2; break; // adres 1 znaku 2 wiersza
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	03 c0       	rjmp	.+6      	; 0x184 <lcd_locate+0x2a>
#endif
#if (LCD_ROWS>2)
    	case 2: y = LCD_LINE3; break; // adres 1 znaku 3 wiersza
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_locate+0x2a>
#endif
#if (LCD_ROWS>3)
    	case 3: y = LCD_LINE4; break; // adres 1 znaku 4 wiersza
 182:	80 e5       	ldi	r24, 0x50	; 80
#endif
	}

	lcd_write_cmd( (0x80 + y + x) );
 184:	60 58       	subi	r22, 0x80	; 128
 186:	86 0f       	add	r24, r22
 188:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>
 18c:	08 95       	ret

0000018e <lcd_char>:
//		 8 w³asnych znaków zdefiniowanych w CGRAM
//		 wysy³amy za pomoc¹ kodów 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
void lcd_char(char c)
{
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
	if (lcd_y>=0 && lcd_y<LCD_ROWS && lcd_x>=0 && lcd_x<LCD_COLS) //zmiana 6
 192:	80 91 71 00 	lds	r24, 0x0071
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	80 f4       	brcc	.+32     	; 0x1ba <lcd_char+0x2c>
 19a:	60 91 70 00 	lds	r22, 0x0070
 19e:	66 23       	and	r22, r22
 1a0:	64 f0       	brlt	.+24     	; 0x1ba <lcd_char+0x2c>
 1a2:	60 31       	cpi	r22, 0x10	; 16
 1a4:	54 f4       	brge	.+20     	; 0x1ba <lcd_char+0x2c>
	{
		lcd_locate(lcd_y,lcd_x);
 1a6:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_locate>
		lcd_write_data( ( c>=0x80 && c<=0x87 ) ? (c & 0x07) : c);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	80 58       	subi	r24, 0x80	; 128
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	08 f4       	brcc	.+2      	; 0x1b4 <lcd_char+0x26>
 1b2:	c7 70       	andi	r28, 0x07	; 7
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_write_data>
	}
	lcd_x++;
 1ba:	80 91 70 00 	lds	r24, 0x0070
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 70 00 	sts	0x0070, r24
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_str>:
//		 Wys³anie stringa do wyœwietlacza LCD z pamiêci RAM
//
//
//----------------------------------------------------------------------------------------
void lcd_str(char * str)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
	register char znak;
	while ( (znak=*(str++)) ) lcd_char( znak );
 1cc:	ec 01       	movw	r28, r24
 1ce:	89 91       	ld	r24, Y+
 1d0:	88 23       	and	r24, r24
 1d2:	29 f0       	breq	.+10     	; 0x1de <lcd_str+0x16>
 1d4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_char>
 1d8:	89 91       	ld	r24, Y+
 1da:	81 11       	cpse	r24, r1
 1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <lcd_str+0xc>
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_cls>:
//		Kasowanie ekranu wyœwietlacza
//
//----------------------------------------------------------------------------------------
void lcd_cls(void)
{
	lcd_y=0; lcd_x=0; //zmiana 2
 1e4:	10 92 71 00 	sts	0x0071, r1
 1e8:	10 92 70 00 	sts	0x0070, r1
	lcd_write_cmd( LCDC_CLS );
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>
 1f2:	08 95       	ret

000001f4 <lcd_init>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
 1f4:	8f 9a       	sbi	0x11, 7	; 17
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
 1f6:	8e 9a       	sbi	0x11, 6	; 17
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
 1f8:	8d 9a       	sbi	0x11, 5	; 17
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
 1fa:	8c 9a       	sbi	0x11, 4	; 17
void lcd_init(void)
{
	// inicjowanie pinów portów ustalonych do pod³¹czenia z wyœwietlaczem LCD
	// ustawienie wszystkich jako wyjœcia
	data_dir_out();
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
 1fc:	ba 9a       	sbi	0x17, 2	; 23
	DDR(LCD_EPORT) |= (1<<LCD_E);
 1fe:	bc 9a       	sbi	0x17, 4	; 23
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
 200:	bb 9a       	sbi	0x17, 3	; 23
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
 202:	c2 9a       	sbi	0x18, 2	; 24
	PORT(LCD_EPORT) |= (1<<LCD_E);
 204:	c4 9a       	sbi	0x18, 4	; 24
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
 206:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	85 ea       	ldi	r24, 0xA5	; 165
 20a:	9e e0       	ldi	r25, 0x0E	; 14
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x18>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_init+0x1e>
 212:	00 00       	nop
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
 214:	c4 98       	cbi	0x18, 4	; 24
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
 216:	c2 98       	cbi	0x18, 2	; 24
	#if USE_RW == 1	
    	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
 218:	c3 98       	cbi	0x18, 3	; 24
	#endif

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
 21a:	c4 9a       	sbi	0x18, 4	; 24
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 21c:	94 9a       	sbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 21e:	95 9a       	sbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 220:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 222:	97 98       	cbi	0x12, 7	; 18
	#endif

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 224:	c4 98       	cbi	0x18, 4	; 24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	94 e0       	ldi	r25, 0x04	; 4
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x36>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x3c>
 230:	00 00       	nop
	_delay_ms(4.1);

	SET_E;
 232:	c4 9a       	sbi	0x18, 4	; 24
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 234:	94 9a       	sbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 236:	95 9a       	sbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 238:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 23a:	97 98       	cbi	0x12, 7	; 18
	CLR_E;
	_delay_ms(4.1);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 23c:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	91 e2       	ldi	r25, 0x21	; 33
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x4c>
 244:	00 00       	nop
	_delay_us(100);

	SET_E;
 246:	c4 9a       	sbi	0x18, 4	; 24
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 248:	94 9a       	sbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 24a:	95 9a       	sbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 24c:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 24e:	97 98       	cbi	0x12, 7	; 18
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
 250:	c4 98       	cbi	0x18, 4	; 24
 252:	81 e2       	ldi	r24, 0x21	; 33
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_init+0x60>
 258:	00 00       	nop
	_delay_us(100);

	SET_E;
 25a:	c4 9a       	sbi	0x18, 4	; 24
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
 25c:	94 98       	cbi	0x12, 4	; 18
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
 25e:	95 9a       	sbi	0x12, 5	; 18
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
 260:	96 98       	cbi	0x12, 6	; 18
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
 262:	97 98       	cbi	0x12, 7	; 18
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x02);// tryb 4-bitowy
	CLR_E;
 264:	c4 98       	cbi	0x18, 4	; 24
 266:	91 e2       	ldi	r25, 0x21	; 33
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x74>
 26c:	00 00       	nop
	_delay_us(100);

	// ju¿ mo¿na u¿ywaæ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>
	// wy³¹czenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>
	// w³¹czenie wyœwietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>
	// przesuwanie kursora w prawo bez przesuwania zawartoœci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_cmd>

	// kasowanie ekranu
	lcd_cls();
 286:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_cls>
 28a:	08 95       	ret

0000028c <main>:



int main(void)
{
	lcd_init();
 28c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_init>
	lcd_cls();
 290:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_cls>
	lcd_locate(0,0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_locate>
	lcd_str("KLIKNIJ MNIE!!!");
 29c:	80 e6       	ldi	r24, 0x60	; 96
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_str>
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x18>

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
