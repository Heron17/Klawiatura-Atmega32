
sterownik lcd4x16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000025c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d0  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e7  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c8  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e2  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000322  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OneWireWriteByte(0x44); // CONVERT T
	return 1;
}
/***********************************************************/
int ds18b20_Read(unsigned char scratchpad[])
{
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
	unsigned char i;
	if (!OneWireReset()) return 0;
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
	OneWireWriteByte(0xcc); // SKIP ROM
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
	OneWireWriteByte(0xbe); // READ SCRATCHPAD
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
	for(i=0; i<9; i++) scratchpad[i] = OneWireReadByte();
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
	return 1;
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
}
/***********************************************************/
int ds18b20_Read(unsigned char scratchpad[])
{
	unsigned char i;
	if (!OneWireReset()) return 0;
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
	OneWireWriteByte(0xcc); // SKIP ROM
	OneWireWriteByte(0xbe); // READ SCRATCHPAD
	for(i=0; i<9; i++) scratchpad[i] = OneWireReadByte();
	return 1;
}
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e5       	ldi	r30, 0x5C	; 92
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	f9 d0       	rcall	.+498    	; 0x23c <main>
  4a:	06 c1       	rjmp	.+524    	; 0x258 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <WriteToLCD>:
	CLR_LCD_E;
	LCD_NOP;
	SET_LCD_E;
	LCD_NOP;
	if(IS_SET_LCD_D4) g+=8;
	if(IS_SET_LCD_D4) g+=4;
  4e:	8b 9a       	sbi	0x11, 3	; 17
	if(IS_SET_LCD_D4) g+=2;
  50:	8c 9a       	sbi	0x11, 4	; 17
  52:	8d 9a       	sbi	0x11, 5	; 17
	if(IS_SET_LCD_D4) g+=1;
  54:	8e 9a       	sbi	0x11, 6	; 17
  56:	84 ff       	sbrs	r24, 4
	CLR_LCD_E;
  58:	02 c0       	rjmp	.+4      	; 0x5e <WriteToLCD+0x10>
	return  g ;
}
  5a:	93 9a       	sbi	0x12, 3	; 18
	unsigned char bf;
	SET_OUT_LCD_D4;
	SET_OUT_LCD_D5;
	SET_OUT_LCD_D6;
	SET_OUT_LCD_D7;
	if(v&0x10) SET_LCD_D4; else CLR_LCD_D4;
  5c:	01 c0       	rjmp	.+2      	; 0x60 <WriteToLCD+0x12>
  5e:	93 98       	cbi	0x12, 3	; 18
	if(v&0x20) SET_LCD_D5; else CLR_LCD_D5;
  60:	85 ff       	sbrs	r24, 5
  62:	02 c0       	rjmp	.+4      	; 0x68 <WriteToLCD+0x1a>
  64:	94 9a       	sbi	0x12, 4	; 18
  66:	01 c0       	rjmp	.+2      	; 0x6a <WriteToLCD+0x1c>
  68:	94 98       	cbi	0x12, 4	; 18
	if(v&0x40) SET_LCD_D6; else CLR_LCD_D6;
  6a:	86 ff       	sbrs	r24, 6
  6c:	02 c0       	rjmp	.+4      	; 0x72 <WriteToLCD+0x24>
  6e:	95 9a       	sbi	0x12, 5	; 18
  70:	01 c0       	rjmp	.+2      	; 0x74 <WriteToLCD+0x26>
  72:	95 98       	cbi	0x12, 5	; 18
	if(v&0x80) SET_LCD_D7; else CLR_LCD_D7;
  74:	88 23       	and	r24, r24
  76:	14 f4       	brge	.+4      	; 0x7c <WriteToLCD+0x2e>
  78:	96 9a       	sbi	0x12, 6	; 18
  7a:	01 c0       	rjmp	.+2      	; 0x7e <WriteToLCD+0x30>
  7c:	96 98       	cbi	0x12, 6	; 18
	CLR_LCD_E;
  7e:	92 98       	cbi	0x12, 2	; 18
	if(rs) SET_LCD_RS;else CLR_LCD_RS;
  80:	66 23       	and	r22, r22
  82:	11 f0       	breq	.+4      	; 0x88 <WriteToLCD+0x3a>
  84:	90 9a       	sbi	0x12, 0	; 18
  86:	01 c0       	rjmp	.+2      	; 0x8a <WriteToLCD+0x3c>
  88:	90 98       	cbi	0x12, 0	; 18
	CLR_LCD_RW;
  8a:	91 98       	cbi	0x12, 1	; 18
	...
	LCD_NOP;
	SET_LCD_E;
  94:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
  9e:	92 98       	cbi	0x12, 2	; 18
	...
	LCD_NOP;
	if(v&0x01) SET_LCD_D4; else CLR_LCD_D4;
  a8:	80 ff       	sbrs	r24, 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <WriteToLCD+0x62>
  ac:	93 9a       	sbi	0x12, 3	; 18
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <WriteToLCD+0x64>
  b0:	93 98       	cbi	0x12, 3	; 18
	if(v&0x02) SET_LCD_D5; else CLR_LCD_D5;
  b2:	81 ff       	sbrs	r24, 1
  b4:	02 c0       	rjmp	.+4      	; 0xba <WriteToLCD+0x6c>
  b6:	94 9a       	sbi	0x12, 4	; 18
  b8:	01 c0       	rjmp	.+2      	; 0xbc <WriteToLCD+0x6e>
  ba:	94 98       	cbi	0x12, 4	; 18
	if(v&0x04) SET_LCD_D6; else CLR_LCD_D6;
  bc:	82 ff       	sbrs	r24, 2
  be:	02 c0       	rjmp	.+4      	; 0xc4 <WriteToLCD+0x76>
  c0:	95 9a       	sbi	0x12, 5	; 18
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <WriteToLCD+0x78>
  c4:	95 98       	cbi	0x12, 5	; 18
	if(v&0x08) SET_LCD_D7; else CLR_LCD_D7;
  c6:	83 ff       	sbrs	r24, 3
  c8:	02 c0       	rjmp	.+4      	; 0xce <WriteToLCD+0x80>
  ca:	96 9a       	sbi	0x12, 6	; 18
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <WriteToLCD+0x82>
  ce:	96 98       	cbi	0x12, 6	; 18
	...
	LCD_NOP;
	SET_LCD_E;
  d8:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
  e2:	92 98       	cbi	0x12, 2	; 18
	...
	LCD_NOP;
	SET_IN_LCD_D4;
  ec:	8b 98       	cbi	0x11, 3	; 17
	SET_IN_LCD_D5;
  ee:	8c 98       	cbi	0x11, 4	; 17
	SET_IN_LCD_D6;
  f0:	8d 98       	cbi	0x11, 5	; 17
	SET_IN_LCD_D7;
  f2:	8e 98       	cbi	0x11, 6	; 17
	CLR_LCD_RS;
  f4:	90 98       	cbi	0x12, 0	; 18
	SET_LCD_RW;
  f6:	91 9a       	sbi	0x12, 1	; 18
	SET_LCD_D7;
  f8:	96 9a       	sbi	0x12, 6	; 18
	...
	/* Przyda³by siê pe³ny odczyt */
	do
	{
		LCD_NOP;
		SET_LCD_E;
 102:	92 9a       	sbi	0x12, 2	; 18
	...
		LCD_NOP;
		bf = IS_SET_LCD_D7;
 10c:	80 b3       	in	r24, 0x10	; 16
		CLR_LCD_E;
 10e:	92 98       	cbi	0x12, 2	; 18
	...
		LCD_NOP;
		SET_LCD_E;
 118:	92 9a       	sbi	0x12, 2	; 18
	...
		LCD_NOP;
		LCD_NOP;
		CLR_LCD_E;
 12a:	92 98       	cbi	0x12, 2	; 18
	}while( bf );
 12c:	86 fd       	sbrc	r24, 6
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <WriteToLCD+0xac>
}
 130:	08 95       	ret

00000132 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	85 e4       	ldi	r24, 0x45	; 69
 134:	9e e1       	ldi	r25, 0x1E	; 30
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_init+0xa>
 13c:	00 00       	nop
/*---------------------------------------------------------*/
/* Inicjalizacja wyœwietlacza */
void lcd_init(void)
{
	_delay_ms(31);
	SET_OUT_LCD_RS;
 13e:	88 9a       	sbi	0x11, 0	; 17
	SET_OUT_LCD_RW;
 140:	89 9a       	sbi	0x11, 1	; 17
	SET_OUT_LCD_E;
 142:	8a 9a       	sbi	0x11, 2	; 17
	SET_OUT_LCD_D4;
 144:	8b 9a       	sbi	0x11, 3	; 17
	SET_OUT_LCD_D5;
 146:	8c 9a       	sbi	0x11, 4	; 17
	SET_OUT_LCD_D6;
 148:	8d 9a       	sbi	0x11, 5	; 17
	SET_OUT_LCD_D7;
 14a:	8e 9a       	sbi	0x11, 6	; 17
	CLR_LCD_E;
 14c:	92 98       	cbi	0x12, 2	; 18
	CLR_LCD_RS;
 14e:	90 98       	cbi	0x12, 0	; 18
	CLR_LCD_RW;
 150:	91 98       	cbi	0x12, 1	; 18
	SET_LCD_D4;
 152:	93 9a       	sbi	0x12, 3	; 18
	SET_LCD_D5;
 154:	94 9a       	sbi	0x12, 4	; 18
	CLR_LCD_D6;
 156:	95 98       	cbi	0x12, 5	; 18
	CLR_LCD_D7;
 158:	96 98       	cbi	0x12, 6	; 18
	...
	LCD_NOP;
	SET_LCD_E;
 162:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
 16c:	92 98       	cbi	0x12, 2	; 18
	...
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x48>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x4e>
	...
	LCD_NOP;
	_delay_ms(10);
	LCD_NOP;
 188:	00 00       	nop
	SET_LCD_E;
 18a:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
 194:	92 98       	cbi	0x12, 2	; 18
	...
 19e:	83 ef       	ldi	r24, 0xF3	; 243
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x70>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x76>
	...
	LCD_NOP;
	_delay_ms(2);
	LCD_NOP;
 1b0:	00 00       	nop
	SET_LCD_E;
 1b2:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
 1bc:	92 98       	cbi	0x12, 2	; 18
	...
 1c6:	83 ef       	ldi	r24, 0xF3	; 243
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x98>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x9e>
 1d0:	00 00       	nop
	LCD_NOP;
	_delay_ms(2);
	CLR_LCD_D4;
 1d2:	93 98       	cbi	0x12, 3	; 18
	...
	LCD_NOP;
	SET_LCD_E;
 1dc:	92 9a       	sbi	0x12, 2	; 18
	...
	LCD_NOP;
	CLR_LCD_E;
 1e6:	92 98       	cbi	0x12, 2	; 18
	...
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	9a e1       	ldi	r25, 0x1A	; 26
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0xc0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0xc6>
	LCD_NOP;
	_delay_us(80);
	WriteToLCD (0x28 , LCDCOMMAND) ;
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	28 df       	rcall	.-432    	; 0x4e <WriteToLCD>
	LCD_DISPLAY(0) ;
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	25 df       	rcall	.-438    	; 0x4e <WriteToLCD>
	LCD_CLEAR ;
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	22 df       	rcall	.-444    	; 0x4e <WriteToLCD>
	LCD_ENTRY_MODE(LCDINCREMENT) ;
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	1f df       	rcall	.-450    	; 0x4e <WriteToLCD>
 210:	08 95       	ret

00000212 <lcd_puts>:
}
/*--------------------------------------------------------*/
/* Wyswietla tekst na aktualnej pozycji kursora */
void lcd_puts(char *str)
{
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	unsigned char i =0;
	while( str[i])
 21a:	88 81       	ld	r24, Y
 21c:	88 23       	and	r24, r24
 21e:	51 f0       	breq	.+20     	; 0x234 <lcd_puts+0x22>
}
/*--------------------------------------------------------*/
/* Wyswietla tekst na aktualnej pozycji kursora */
void lcd_puts(char *str)
{
	unsigned char i =0;
 220:	10 e0       	ldi	r17, 0x00	; 0
	while( str[i])
	LCD_WRITE_DATA(str[i++]) ;
 222:	1f 5f       	subi	r17, 0xFF	; 255
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	13 df       	rcall	.-474    	; 0x4e <WriteToLCD>
/*--------------------------------------------------------*/
/* Wyswietla tekst na aktualnej pozycji kursora */
void lcd_puts(char *str)
{
	unsigned char i =0;
	while( str[i])
 228:	fe 01       	movw	r30, r28
 22a:	e1 0f       	add	r30, r17
 22c:	f1 1d       	adc	r31, r1
 22e:	80 81       	ld	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	f7 cf       	rjmp	.-18     	; 0x222 <lcd_puts+0x10>
	LCD_WRITE_DATA(str[i++]) ;
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

0000023c <main>:


char str[]=" Termometr ";
int main(void)
{
	lcd_init(); /* Funkcja inicjalizuje wyœwietlacz */
 23c:	7a df       	rcall	.-268    	; 0x132 <lcd_init>
	 /* W³¹cza wyœwietlanie */
	LCD_DISPLAY(LCDDISPLAY); //|LCDCURSOR
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	05 df       	rcall	.-502    	; 0x4e <WriteToLCD>
	/* Czyœci ekran */
	LCD_CLEAR;
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	02 df       	rcall	.-508    	; 0x4e <WriteToLCD>
	/* Wyœwietla tytu³ */
	LCD_LOCATE(0,0);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	ff de       	rcall	.-514    	; 0x4e <WriteToLCD>
	lcd_puts(str);
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	de df       	rcall	.-68     	; 0x212 <lcd_puts>
 256:	ff cf       	rjmp	.-2      	; 0x256 <main+0x1a>

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
